import random
from time import sleep

import requests
import os

# GitHub API URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
GITHUB_API_URL = "https://api.github.com/search/repositories"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def search_repositories(query, sort_by="stars", order="desc", per_page=100, max_results=1000):
    repositories = []
    page = 1
    while len(repositories) < max_results:
        params = {
            "q": query,
            "sort": sort_by,
            "order": order,
            "per_page": per_page,
            "page": page
        }

        headers = {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"token {os.getenv('GITHUB_TOKEN')}"
        }

        response = requests.get(GITHUB_API_URL, params=params, headers=headers)
        if response.status_code == 200:
            items = response.json().get("items", [])
            if not items:
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break
            repositories.extend(items)
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            page += 1
            sleep(random.randint(5, 8))
        else:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            break

    return repositories[:max_results]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ max_results —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ README.md –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
def write_to_readme(keywords, repositories, filename="README"):
    with open(filename+"." + keywords + ".md", "w", encoding="utf-8") as f:
        f.write("# Awesome Repositories: " + keywords + "\n | Repository | Stars | Forks | Description |\n---|---|---|----------------|\n")
        for repo in repositories:
            f.write(f"| [{repo['full_name']}]({repo['html_url']}) |")
            f.write(f" {repo['stargazers_count']} |")
            f.write(f" {repo['forks_count']} |")
            f.write(f" üìù: {repo['description'] or 'No description'} |\n")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ")

    # –ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ (–º–∞–∫—Å–∏–º—É–º 300)
    repositories = search_repositories(query=keywords, max_results=1000)

    # –ó–∞–ø–∏—Å—å –≤ README.md
    if repositories:
        write_to_readme(keywords.replace(":","_"),repositories)
        print(f"–§–∞–π–ª README.{keywords}.md –æ–±–Ω–æ–≤–ª–µ–Ω —Å {len(repositories)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏.")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.")


if __name__ == "__main__":
    main()
